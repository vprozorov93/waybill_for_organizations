# Form implementation generated from reading ui file 'waybill.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QTableWidgetItem, QMessageBox, QMainWindow
from db_handler import DBHandler
import platform
import sys

from excel_handler import get_waybills
from create_driver import CreateDriverWindow
from create_car import CreateCarWindow
from settings import get_settings


class ComboBoxDelegate(QtWidgets.QItemDelegate):
    def __init__(self, parent, items=[]):
        super(ComboBoxDelegate, self).__init__(parent)
        self.items = items

    def createEditor(self, parent, option, index):
        editor = QtWidgets.QComboBox(parent)
        editor.addItems(self.items)  # список для комбобокса
        return editor

    def setEditorData(self, editor, index):
        pos = -1
        editor.setCurrentIndex(pos)

    def setModelData(self, editor, model, index):
        model.setData(index, editor.currentText())


class Ui_MainWindow(object):
    def __init__(self):
        self.db = DBHandler()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(939, 650)
        MainWindow.setMinimumSize(QtCore.QSize(939, 650))
        MainWindow.setMaximumSize(QtCore.QSize(939, 650))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_main = QtWidgets.QWidget()
        self.tab_main.setObjectName("tab_main")

        self.comboBox_choose_driver = QtWidgets.QComboBox(parent=self.tab_main)
        self.comboBox_choose_driver.setGeometry(QtCore.QRect(30, 30, 391, 26))
        self.comboBox_choose_driver.setObjectName("comboBox_choose_driver")
        self.comboBox_choose_driver.setPlaceholderText('Выберите водителя')
        self.comboBox_choose_driver.setCurrentIndex(-1)

        self.comboBox_choose_car = QtWidgets.QComboBox(parent=self.tab_main)
        self.comboBox_choose_car.setGeometry(QtCore.QRect(470, 30, 391, 26))
        self.comboBox_choose_car.setPlaceholderText('Выберите автомобиль')
        self.comboBox_choose_car.setObjectName("comboBox_choose_car")
        self.comboBox_choose_car.setCurrentIndex(-1)

        self.dateEdit_end = QtWidgets.QDateEdit(parent=self.tab_main)
        self.dateEdit_end.setGeometry(QtCore.QRect(310, 90, 110, 24))
        self.dateEdit_end.setMinimumDate(QtCore.QDate(2023, 1, 1))
        self.dateEdit_end.setCalendarPopup(True)
        self.dateEdit_end.setObjectName("dateEdit_end")
        self.dateEdit_start = QtWidgets.QDateEdit(parent=self.tab_main)
        self.dateEdit_start.setGeometry(QtCore.QRect(160, 90, 110, 24))
        self.dateEdit_start.setMinimumDate(QtCore.QDate(2023, 1, 1))
        self.dateEdit_start.setCalendarPopup(True)
        self.dateEdit_start.setObjectName("dateEdit_start")
        self.label_date_start = QtWidgets.QLabel(parent=self.tab_main)
        self.label_date_start.setGeometry(QtCore.QRect(40, 93, 121, 16))
        self.label_date_start.setObjectName("label_date_start")
        self.label_date_end = QtWidgets.QLabel(parent=self.tab_main)
        self.label_date_end.setGeometry(QtCore.QRect(280, 93, 21, 16))
        self.label_date_end.setObjectName("label_date_end")
        self.radioButton_end_date_next_date = QtWidgets.QRadioButton(
            parent=self.tab_main)
        self.radioButton_end_date_next_date.setGeometry(
            QtCore.QRect(260, 130, 151, 20))
        self.radioButton_end_date_next_date.setChecked(True)
        self.radioButton_end_date_next_date.setObjectName(
            "radioButton_end_date_next_date")
        self.radioButton_end_date_current_date = QtWidgets.QRadioButton(
            parent=self.tab_main)
        self.radioButton_end_date_current_date.setGeometry(
            QtCore.QRect(260, 160, 141, 20))
        self.radioButton_end_date_current_date.setChecked(False)
        self.radioButton_end_date_current_date.setEnabled(False)
        self.radioButton_end_date_current_date.setObjectName(
            "radioButton_end_date_current_date")
        self.radioButton_end_date_choose_date = QtWidgets.QRadioButton(
            parent=self.tab_main)
        self.radioButton_end_date_choose_date.setGeometry(
            QtCore.QRect(260, 190, 71, 20))
        self.radioButton_end_date_choose_date.setChecked(False)
        self.radioButton_end_date_choose_date.setEnabled(False)
        self.radioButton_end_date_choose_date.setObjectName(
            "radioButton_end_date_choose_date")
        self.label_date_end_waybill = QtWidgets.QLabel(parent=self.tab_main)
        self.label_date_end_waybill.setGeometry(QtCore.QRect(40, 132, 211, 16))
        self.label_date_end_waybill.setObjectName("label_date_end_waybill")
        self.dateEdit_end_waybill = QtWidgets.QDateEdit(parent=self.tab_main)
        self.dateEdit_end_waybill.setGeometry(QtCore.QRect(330, 190, 110, 24))
        self.dateEdit_end_waybill.setReadOnly(False)
        self.dateEdit_end_waybill.setMinimumDate(QtCore.QDate(2023, 1, 1))
        self.dateEdit_end_waybill.setCalendarPopup(True)
        self.dateEdit_end_waybill.setEnabled(False)
        self.dateEdit_end_waybill.setObjectName("dateEdit_end_waybill")

        self.pushButton_print = QtWidgets.QPushButton(parent=self.tab_main)
        self.pushButton_print.setGeometry(QtCore.QRect(640, 540, 113, 32))
        self.pushButton_print.setObjectName("pushButton_print")
        self.pushButton_print.clicked.connect(lambda: self.print_save_waybill(self.pushButton_print.text()))
        self.pushButton_print.setEnabled(False)
        self.pushButton_print.setVisible(False)
        # if 'no-platform' not in platform.platform().lower():
        #     self.pushButton_print.setEnabled(False)
        #     self.qboxmess = QtWidgets.QMessageBox(
        #         text='Функция печати доступна только для операционных систем Windows')
        #     self.qboxmess.show()

        self.pushButton_save = QtWidgets.QPushButton(parent=self.tab_main)
        self.pushButton_save.setGeometry(QtCore.QRect(760, 540, 113, 32))
        self.pushButton_save.setObjectName("pushButton_save")
        self.pushButton_save.clicked.connect(lambda: self.print_save_waybill(self.pushButton_save.text()))

        self.tabWidget.addTab(self.tab_main, "")
        self.tab_data = QtWidgets.QWidget()
        self.tab_data.setObjectName("tab_data")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.tab_data)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 901, 601))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_data = QtWidgets.QVBoxLayout(
            self.verticalLayoutWidget)
        self.verticalLayout_data.setSizeConstraint(
            QtWidgets.QLayout.SizeConstraint.SetMaximumSize)
        self.verticalLayout_data.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_data.setObjectName("verticalLayout_data")
        self.groupBox_drivers = QtWidgets.QGroupBox(
            parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setKerning(True)
        self.groupBox_drivers.setFont(font)
        self.groupBox_drivers.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.groupBox_drivers.setObjectName("groupBox_drivers")

        self.tableWidget_drivers = QtWidgets.QTableWidget(
            parent=self.groupBox_drivers)
        self.tableWidget_drivers.setEnabled(True)
        self.tableWidget_drivers.setGeometry(QtCore.QRect(5, 60, 890, 230))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding,
            QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.tableWidget_drivers.sizePolicy().hasHeightForWidth())
        self.tableWidget_drivers.setSizePolicy(sizePolicy)
        self.tableWidget_drivers.setMinimumSize(QtCore.QSize(881, 230))
        self.tableWidget_drivers.setMaximumSize(QtCore.QSize(890, 230))
        self.tableWidget_drivers.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        self.tableWidget_drivers.setAutoFillBackground(False)
        self.tableWidget_drivers.setDragEnabled(False)
        self.tableWidget_drivers.setTextElideMode(
            QtCore.Qt.TextElideMode.ElideRight)
        self.tableWidget_drivers.setColumnCount(6)
        self.tableWidget_drivers.setObjectName("tableWidget_drivers")
        self.tableWidget_drivers.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_drivers.setHorizontalHeaderItem(5, item)
        self.tableWidget_drivers.horizontalHeader().setCascadingSectionResizes(
            False)
        self.tableWidget_drivers.horizontalHeader().setDefaultSectionSize(100)
        self.tableWidget_drivers.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_drivers.verticalHeader().setCascadingSectionResizes(
            False)
        self.tableWidget_drivers.verticalHeader().setStretchLastSection(True)
        self.tableWidget_drivers.verticalHeader().hide()
        self.tableWidget_drivers.setColumnHidden(0, True)

        self.btn_create_driver = QtWidgets.QPushButton(
            parent=self.groupBox_drivers)
        self.btn_create_driver.setGeometry(QtCore.QRect(0, 20, 113, 32))
        self.btn_create_driver.setObjectName("btn_create_driver")
        self.btn_create_driver.clicked.connect(self.create_driver_window)

        self.btn_delete_driver = QtWidgets.QPushButton(
            parent=self.groupBox_drivers)
        self.btn_delete_driver.setGeometry(QtCore.QRect(120, 20, 113, 32))
        self.btn_delete_driver.setObjectName("btn_delete_driver")
        self.btn_delete_driver.clicked.connect(self.delete_driver)

        self.verticalLayout_data.addWidget(self.groupBox_drivers)

        self.groupBox_cars = QtWidgets.QGroupBox(
            parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.groupBox_cars.setFont(font)
        self.groupBox_cars.setObjectName("groupBox_cars")

        self.btn_create_car = QtWidgets.QPushButton(parent=self.groupBox_cars)
        self.btn_create_car.setGeometry(QtCore.QRect(0, 20, 113, 32))
        self.btn_create_car.setObjectName("btn_create_car")
        self.btn_create_car.clicked.connect(self.create_car_window)

        self.btn_delete_car = QtWidgets.QPushButton(parent=self.groupBox_cars)
        self.btn_delete_car.setGeometry(QtCore.QRect(120, 20, 113, 32))
        self.btn_delete_car.setObjectName("btn_delete_car")
        self.btn_delete_car.clicked.connect(self.delete_car)

        self.tableWidget_cars = QtWidgets.QTableWidget(
            parent=self.groupBox_cars)
        self.tableWidget_cars.setEnabled(True)
        self.tableWidget_cars.setGeometry(QtCore.QRect(5, 60, 890, 230))
        # sizePolicy = QtWidgets.QSizePolicy(
        #     QtWidgets.QSizePolicy.Policy.Expanding,
        #     QtWidgets.QSizePolicy.Policy.Expanding)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(
        #     self.tableWidget_cars.sizePolicy().hasHeightForWidth())
        # self.tableWidget_cars.setSizePolicy(sizePolicy)
        self.tableWidget_cars.setMinimumSize(QtCore.QSize(881, 230))
        self.tableWidget_cars.setMaximumSize(QtCore.QSize(890, 230))
        self.tableWidget_cars.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        self.tableWidget_cars.setAutoFillBackground(False)
        self.tableWidget_cars.setDragEnabled(False)
        self.tableWidget_cars.setTextElideMode(
            QtCore.Qt.TextElideMode.ElideRight)
        self.tableWidget_cars.setColumnCount(6)
        self.tableWidget_cars.setObjectName("tableWidget_cars")
        self.tableWidget_cars.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(
            QtCore.Qt.AlignmentFlag.AlignJustify | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.tableWidget_cars.setHorizontalHeaderItem(5, item)
        self.tableWidget_cars.horizontalHeader().setCascadingSectionResizes(
            False)
        self.tableWidget_cars.horizontalHeader().setDefaultSectionSize(100)
        self.tableWidget_cars.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_cars.verticalHeader().setCascadingSectionResizes(
            False)
        self.tableWidget_cars.verticalHeader().setStretchLastSection(True)
        self.tableWidget_cars.verticalHeader().hide()
        self.tableWidget_cars.horizontalHeader().resizeSection(0, 30)
        self.tableWidget_cars.horizontalHeader().resizeSection(1, 200)
        self.tableWidget_cars.horizontalHeader().resizeSection(2, 120)
        self.tableWidget_cars.horizontalHeader().resizeSection(3, 100)
        self.tableWidget_cars.horizontalHeader().resizeSection(4, 200)
        self.tableWidget_cars.horizontalHeader().resizeSection(5, 30)
        self.tableWidget_cars.setColumnHidden(0, True)

        self.verticalLayout_data.addWidget(self.groupBox_cars)
        self.tabWidget.addTab(self.tab_data, "")
        self.tab_settings = QtWidgets.QWidget()
        self.tab_settings.setObjectName("tab_settings")
        self.groupBox_waybill_settings = QtWidgets.QGroupBox(
            parent=self.tab_settings)
        self.groupBox_waybill_settings.setGeometry(
            QtCore.QRect(10, 0, 431, 281))
        self.groupBox_waybill_settings.setObjectName(
            "groupBox_waybill_settings")
        self.label_dispatcher = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings)
        self.label_dispatcher.setGeometry(QtCore.QRect(20, 42, 81, 16))
        self.label_dispatcher.setObjectName("label_dispatcher")
        self.lineEdit_dispatcher = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings)
        self.lineEdit_dispatcher.setGeometry(QtCore.QRect(120, 40, 281, 21))
        self.lineEdit_dispatcher.setObjectName("lineEdit_dispatcher")
        self.label_fuel_settings = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings)
        self.label_fuel_settings.setGeometry(QtCore.QRect(20, 80, 100, 16))
        self.label_fuel_settings.setObjectName("label_fuel_settings")
        self.tableWidget_fuel_settings = QtWidgets.QTableWidget(
            parent=self.groupBox_waybill_settings)
        self.tableWidget_fuel_settings.verticalHeader().hide()
        self.tableWidget_fuel_settings.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.tableWidget_fuel_settings.setGeometry(
            QtCore.QRect(20, 110, 261, 101))
        self.tableWidget_fuel_settings.setObjectName(
            "tableWidget_fuel_settings")
        self.tableWidget_fuel_settings.setColumnCount(2)
        self.tableWidget_fuel_settings.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_fuel_settings.setHorizontalHeaderItem(0, item)
        self.tableWidget_fuel_settings.horizontalHeader().resizeSection(0, 120)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_fuel_settings.setHorizontalHeaderItem(1, item)
        self.tableWidget_fuel_settings.horizontalHeader().resizeSection(1, 120)
        self.lineEdit_delivery_type = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings)
        self.lineEdit_delivery_type.setGeometry(
            QtCore.QRect(130, 230, 281, 21))
        self.lineEdit_delivery_type.setObjectName("lineEdit_delivery_type")
        self.label_delivery_type = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings)
        self.label_delivery_type.setGeometry(QtCore.QRect(20, 232, 101, 16))
        self.label_delivery_type.setObjectName("label_delivery_type")
        self.groupBox_waybill_settings_company = QtWidgets.QGroupBox(
            parent=self.tab_settings)
        self.groupBox_waybill_settings_company.setGeometry(
            QtCore.QRect(10, 300, 431, 231))
        self.groupBox_waybill_settings_company.setObjectName(
            "groupBox_waybill_settings_company")
        self.lineEdit_company_name = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings_company)
        self.lineEdit_company_name.setGeometry(QtCore.QRect(155, 40, 256, 21))
        self.lineEdit_company_name.setObjectName("lineEdit_company_name")
        self.lineEdit_company_address = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings_company)
        self.lineEdit_company_address.setGeometry(
            QtCore.QRect(160, 70, 251, 21))
        self.lineEdit_company_address.setObjectName("lineEdit_company_address")
        self.lineEdit_company_ogrn = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings_company)
        self.lineEdit_company_ogrn.setGeometry(QtCore.QRect(60, 100, 351, 21))
        self.lineEdit_company_ogrn.setObjectName("lineEdit_company_ogrn")
        self.lineEdit_delivery_department_title = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings_company)
        self.lineEdit_delivery_department_title.setGeometry(
            QtCore.QRect(230, 130, 181, 21))
        self.lineEdit_delivery_department_title.setObjectName(
            "lineEdit_delivery_department_title")
        self.lineEdit_start_address = QtWidgets.QLineEdit(
            parent=self.groupBox_waybill_settings_company)
        self.lineEdit_start_address.setGeometry(
            QtCore.QRect(180, 160, 231, 21))
        self.lineEdit_start_address.setObjectName("lineEdit_start_address")
        self.label_company_name = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings_company)
        self.label_company_name.setGeometry(QtCore.QRect(20, 42, 131, 16))
        self.label_company_name.setObjectName("label_company_name")
        self.label_company_address = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings_company)
        self.label_company_address.setGeometry(QtCore.QRect(20, 72, 141, 16))
        self.label_company_address.setObjectName("label_company_address")
        self.label_company_ogrn = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings_company)
        self.label_company_ogrn.setGeometry(QtCore.QRect(20, 102, 51, 16))
        self.label_company_ogrn.setObjectName("label_company_ogrn")
        self.label_delivery_department_title = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings_company)
        self.label_delivery_department_title.setGeometry(
            QtCore.QRect(20, 132, 211, 16))
        self.label_delivery_department_title.setObjectName(
            "label_delivery_department_title")
        self.label_delivery_start_address = QtWidgets.QLabel(
            parent=self.groupBox_waybill_settings_company)
        self.label_delivery_start_address.setGeometry(
            QtCore.QRect(20, 162, 211, 16))
        self.label_delivery_start_address.setObjectName(
            "label_delivery_start_address")
        self.tabWidget.addTab(self.tab_settings, "")
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 939, 24))
        # self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)

        self.comboBox_choose_car.currentIndexChanged.connect(self.set_current_car)
        self.comboBox_choose_driver.currentIndexChanged.connect(self.set_current_driver)
        self.current_car = ''
        self.current_driver = ''
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.import_settings()
        self.import_database()
        self.fill_comboBox_choose_car()
        self.fill_comboBox_choose_driver()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Путевые листы"))
        self.label_date_start.setText(
            _translate("MainWindow", "Путевые листы с:"))
        self.label_date_end.setText(_translate("MainWindow", "по:"))
        self.radioButton_end_date_next_date.setText(
            _translate("MainWindow", "на следующий день"))
        self.radioButton_end_date_current_date.setText(
            _translate("MainWindow", "на день начала"))
        self.radioButton_end_date_choose_date.setText(
            _translate("MainWindow", "в дату:"))
        self.label_date_end_waybill.setText(
            _translate("MainWindow", "Дата окончания путевого листа:"))
        self.pushButton_print.setText(_translate("MainWindow", "Напечатать"))
        self.pushButton_save.setText(_translate("MainWindow", "Сохранить"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_main),
                                  _translate("MainWindow", "Главная"))
        self.groupBox_drivers.setTitle(_translate("MainWindow", "Водители"))
        self.tableWidget_drivers.setSortingEnabled(True)
        item = self.tableWidget_drivers.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tableWidget_drivers.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "ФИО"))
        item = self.tableWidget_drivers.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "ФИО сокр."))
        item = self.tableWidget_drivers.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Водительское удостоверение"))
        item = self.tableWidget_drivers.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Категория удостоверения"))
        item = self.tableWidget_drivers.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Префикис путевого листа"))
        self.tableWidget_drivers.horizontalHeader().resizeSection(0, 30)
        self.tableWidget_drivers.horizontalHeader().resizeSection(1, 300)
        self.tableWidget_drivers.horizontalHeader().resizeSection(2, 120)
        self.tableWidget_drivers.horizontalHeader().resizeSection(3, 100)
        self.tableWidget_drivers.horizontalHeader().resizeSection(4, 100)
        self.tableWidget_drivers.horizontalHeader().resizeSection(5, 100)
        self.btn_create_driver.setText(_translate("MainWindow", "Создать"))
        self.btn_delete_driver.setText(_translate("MainWindow", "Удалить"))
        self.groupBox_cars.setTitle(_translate("MainWindow", "Автомобили"))
        self.btn_create_car.setText(_translate("MainWindow", "Создать"))
        self.btn_delete_car.setText(_translate("MainWindow", "Удалить"))
        self.tableWidget_cars.setSortingEnabled(True)
        item = self.tableWidget_cars.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tableWidget_cars.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Модель"))
        item = self.tableWidget_cars.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Гос. номер"))
        item = self.tableWidget_cars.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Тип топлива"))
        item = self.tableWidget_cars.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Макс. расход топлива"))
        item = self.tableWidget_cars.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Код топлива"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_data),
                                  _translate("MainWindow",
                                             "Данные машин и водителей"))
        self.groupBox_waybill_settings.setTitle(
            _translate("MainWindow", "Настройки документа"))
        self.label_dispatcher.setText(_translate("MainWindow", "Диспетчер:"))
        self.label_fuel_settings.setText(
            _translate("MainWindow", "Коды топлива:"))
        item = self.tableWidget_fuel_settings.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Топливо"))
        item = self.tableWidget_fuel_settings.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Код"))
        self.label_delivery_type.setText(
            _translate("MainWindow", "Вид перевозок"))
        self.groupBox_waybill_settings_company.setTitle(
            _translate("MainWindow", "Настройки компании"))
        self.label_company_name.setText(
            _translate("MainWindow", "Название компании:"))
        self.label_company_address.setText(
            _translate("MainWindow", "Юр. адрес компании:"))
        self.label_company_ogrn.setText(_translate("MainWindow", "ОГРН:"))
        self.label_delivery_department_title.setText(
            _translate("MainWindow", "Отдел отвечющий за перевозки:"))
        self.label_delivery_start_address.setText(
            _translate("MainWindow", "Адрес начала маршрута:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_settings),
                                  _translate("MainWindow", "Настройки"))

    def print_save_waybill(self, button):
        if self.comboBox_choose_car.currentIndex() == -1:
            self.qboxmess = QtWidgets.QMessageBox(
                text=f'Выберите автомобиль перед {"печатью" if button == "Напечатать" else "сохранением"} путевых листов')
            self.qboxmess.show()
        else:
            end_date = ''
            if self.radioButton_end_date_next_date.isChecked():
                end_date_type = 1
            elif self.radioButton_end_date_current_date.isChecked():
                end_date_type = 2
            else:
                end_date_type = 3
                end_date = self.dateEdit_end_waybill.text()
            params = {'driver': self.current_driver,
                      'car': self.current_car,
                      'dates': [self.dateEdit_start.text(), self.dateEdit_end.text()],
                      'end_date': [end_date_type, end_date],
                      'company_settings': self.settings}

            get_waybills(button, params)


    def set_current_car(self, index):
        self.current_car = self.comboBox_choose_car.itemData(index)

    def set_current_driver(self, index):
        self.current_driver = self.comboBox_choose_driver.itemData(index)

    def fill_comboBox_choose_car(self):
        self.comboBox_choose_car.clear()
        table = self.tableWidget_cars
        for index in range(0, self.tableWidget_cars.rowCount()):
            self.comboBox_choose_car.addItem(table.item(index, 1).text() + ' ' + table.item(index, 2).text(),
                                             [table.item(index, 1).text(),
                                              table.item(index, 2).text(),
                                              table.item(index, 3).text(),
                                              table.item(index, 4).text(),
                                              table.item(index, 5).text()])

    def fill_comboBox_choose_driver(self):
        self.comboBox_choose_driver.clear()
        table = self.tableWidget_drivers
        for index in range(0, table.rowCount()):
            self.comboBox_choose_driver.addItem(table.item(index, 1).text(),
                                                [table.item(index, 1).text(),
                                                 table.item(index, 2).text(),
                                                 table.item(index, 3).text(),
                                                 table.item(index, 4).text(),
                                                 table.item(index, 5).text()])

    def import_settings(self):
        self.settings = get_settings()
        self.lineEdit_dispatcher.setText(self.settings['dispatcher'])

        for index, (fuel_type, fuel_code) in enumerate(
                self.settings['fuel_settings'].items()):
            self.tableWidget_fuel_settings.insertRow(index)
            self.tableWidget_fuel_settings.setItem(index, 0,
                                                   QTableWidgetItem(fuel_type))
            self.tableWidget_fuel_settings.setItem(index, 1,
                                                   QTableWidgetItem(fuel_code))

        self.lineEdit_delivery_type.setText(self.settings['delivery_type'])
        self.lineEdit_company_name.setText(self.settings['company_name'])
        self.lineEdit_company_address.setText(self.settings['company_address'])
        self.lineEdit_company_ogrn.setText(self.settings['company_ogrn'])
        self.lineEdit_delivery_department_title.setText(
            self.settings['delivery_department_title'])
        self.lineEdit_start_address.setText(self.settings['start_address'])

    def import_database(self):
        cars = self.db.get_data('cars')
        fuel_types = [f_type for f_type in self.settings['fuel_settings']]
        self.tableWidget_cars.setItemDelegateForColumn(3, ComboBoxDelegate(
            self.tableWidget_cars, fuel_types))
        for index_car, car in enumerate(cars):
            self.tableWidget_cars.insertRow(index_car)
            for index, car_param in enumerate(car):
                if index == 3:
                    self.tableWidget_cars.setItem(index_car, index,
                                                  QTableWidgetItem(
                                                      str(car_param)))
                else:
                    self.tableWidget_cars.setItem(index_car, index,
                                                  QTableWidgetItem(
                                                      str(car_param)))

                if index in [0, 5]:
                    self.tableWidget_cars.item(index_car, index).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)

        self.tableWidget_cars.cellChanged.connect(self.change_car)
        self.tableWidget_cars.cellDoubleClicked.connect(self.clear_fuel_type)

        drivers = self.db.get_data('drivers')
        for index_driver, driver in enumerate(drivers):
            self.tableWidget_drivers.insertRow(index_driver)
            for index, driver_param in enumerate(driver):
                self.tableWidget_drivers.setItem(index_driver, index,
                                                 QTableWidgetItem(
                                                     str(driver_param)))
                if index in [0, 2, 5]:
                    self.tableWidget_drivers.item(index_driver,
                                                  index).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)

        self.tableWidget_drivers.cellChanged.connect(self.change_driver)

    def create_driver_window(self):
        def choose(button):
            window = self.create_driver_window_open
            if button.text() == 'OK':
                window_params = [window.lineEdit_fio_full.text(),
                                 window.label_fio_short_data.text(),
                                 window.lineEdit_license_number.text(),
                                 window.lineEdit_license_cat.text(),
                                 window.label_prefix_data.text()]
                if all(window_params):
                    self.db.post_data('drivers', {'fio_full': window_params[0],
                                                  'fio_short': window_params[
                                                      1],
                                                  'license_num': window_params[
                                                      2],
                                                  'license_category':
                                                      window_params[3],
                                                  'waybill_index':
                                                      window_params[4]})
                    db_data = self.db.get_data('drivers', 'short')
                    index_in_db = filter(lambda x: x[1] == window_params[1],
                                         db_data).__next__()[0]
                    window_params.insert(0, index_in_db)
                    self.tableWidget_drivers.insertRow(0)
                    self.tableWidget_drivers.cellChanged.disconnect()
                    for index, element in enumerate(window_params):
                        self.tableWidget_drivers.setItem(0, index,
                                                         QTableWidgetItem(
                                                             str(element)))
                    self.tableWidget_drivers.cellChanged.connect(
                        self.change_driver)
                    self.tableWidget_drivers.item(0,
                                                  0).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                    self.tableWidget_drivers.item(0,
                                                  2).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                    self.tableWidget_drivers.item(0,
                                                  5).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                    window.close()
                    del self.create_driver_window_open

                else:
                    self.qboxmess = QtWidgets.QMessageBox(
                        text='Заполните все параметры водителя')
                    self.qboxmess.show()
            else:
                self.qmessage_box('Закрытие без сохранения',
                                  'Закрыть окно без созханения водителя', '')
                if self.qmessage_box_result:
                    window.close()

        self.create_driver_window_open = CreateDriverWindow()
        self.create_driver_window_open.show()
        self.create_driver_window_open.buttonBox.clicked.connect(choose)

    def delete_driver(self):
        if self.tableWidget_drivers.currentRow() != -1:
            driver_fio = self.tableWidget_drivers.item(
                self.tableWidget_drivers.currentRow(), 1).text()

            self.qmessage_box('Удаление водителя', 'Вы точно хотите удалить',
                              driver_fio)

            if self.qmessage_box_result:
                driver_index = self.tableWidget_drivers.item(
                    self.tableWidget_drivers.currentRow(), 0).text()

                self.tableWidget_drivers.removeRow(
                    self.tableWidget_drivers.currentRow())

                self.db.delete_data('drivers', int(driver_index))

    def change_driver(self, row, col):
        self.fill_comboBox_choose_driver()
        table = self.tableWidget_drivers
        if col == 1:
            fio_arr = table.item(row, col).text().split(' ')
            if isinstance(fio_arr, list):
                if len(fio_arr) == 2 and len(fio_arr[1]) > 0:
                    fio_short = f"{fio_arr[0]} {fio_arr[1][0]}."
                    prefix = f"{fio_arr[0][0]}{fio_arr[1][0]}"
                elif len(fio_arr) == 3 and len(fio_arr[2]) > 0:
                    fio_short = f"{fio_arr[0]} {fio_arr[1][0]}.{fio_arr[2][0]}."
                    prefix = f"{fio_arr[0][0]}{fio_arr[1][0]}{fio_arr[2][0]}"
                else:
                    if len(fio_arr[0]) > 0:
                        fio_short = f"{fio_arr[0]}"
                        prefix = f"{fio_arr[0][0]}"
                    else:
                        fio_short = ''
                        prefix = ''
                table.item(row, 2).setText(fio_short)
                table.item(row, 2).setFlags(
                    QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                table.item(row, 5).setText(prefix)
                table.item(row, 5).setFlags(
                    QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)

        data = {'fio_full': table.item(row, 1).text(),
                'fio_short': table.item(row, 2).text(),
                'license_num': table.item(row, 3).text(),
                'license_category': table.item(row, 4).text(),
                'waybill_index': table.item(row, 5).text(),
                'id': table.item(row, 0).text()}

        self.db.update_data('drivers', data)

    def create_car_window(self):
        def choose(button):
            window = self.create_car_window_open
            if button.text() == 'OK':
                window_params = [window.lineEdit_model.text(),
                                 window.lineEdit_gov_number.text(),
                                 window.comboBox_fuel_type.currentText(),
                                 window.lineEdit_max_fuel_rate.text(),
                                 window.label_max_fuel_code_value.text()]
                if all(window_params):
                    self.db.post_data('cars', {'model': window_params[0],
                                               'gov_number': window_params[1],
                                               'fuel_type': window_params[2],
                                               'fuel_max_rate': window_params[3],
                                               'fuel_code': window_params[4]})
                    db_data = self.db.get_data('cars', 'short')
                    index_in_db = filter(lambda x: x[1] == window_params[1],
                                         db_data).__next__()[0]
                    window_params.insert(0, index_in_db)
                    self.tableWidget_cars.insertRow(0)
                    self.tableWidget_cars.cellChanged.disconnect()
                    for index, element in enumerate(window_params):
                        self.tableWidget_cars.setItem(0, index,
                                                      QTableWidgetItem(
                                                          str(element)))
                    self.tableWidget_cars.cellChanged.connect(
                        self.change_car)
                    self.tableWidget_cars.item(0, 0).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)

                    self.tableWidget_cars.item(0, 5).setFlags(
                        QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                    window.close()
                    del self.create_car_window_open

                else:
                    self.qboxmess = QtWidgets.QMessageBox(
                        text='Заполните все параметры автомобиля')
                    self.qboxmess.show()
            else:
                self.qmessage_box('Закрытие без сохранения',
                                  'Закрыть окно без созханения автомобиля', '')
                if self.qmessage_box_result:
                    window.close()

        self.create_car_window_open = CreateCarWindow(
            self.settings['fuel_settings'])
        self.create_car_window_open.show()
        self.create_car_window_open.buttonBox.clicked.connect(choose)

    def delete_car(self):
        if self.tableWidget_cars.currentRow() != -1:
            car_number = (self.tableWidget_cars.item(
                self.tableWidget_cars.currentRow(), 1).text() + " " +
                          self.tableWidget_cars.item(
                              self.tableWidget_cars.currentRow(), 2).text())

            self.qmessage_box('Удаление машины', 'Вы точно хотите удалить',
                              car_number)

            if self.qmessage_box_result:
                car_index = self.tableWidget_cars.item(
                    self.tableWidget_cars.currentRow(), 0).text()

                self.tableWidget_cars.removeRow(
                    self.tableWidget_cars.currentRow())

                self.db.delete_data('cars', int(car_index))

    def change_car(self, row, col):
        self.fill_comboBox_choose_car()
        table = self.tableWidget_cars

        fuel_code = table.item(row, col).text()

        if col == 3:
            table.setItem(row, 5, QTableWidgetItem(
                str(self.settings['fuel_settings'][fuel_code])))
            table.item(row, 5).setFlags(
                QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEnabled)

        data = {'model': table.item(row, 1).text(),
                'gov_number': table.item(row, 2).text(),
                'fuel_type': table.item(row, 3).text(),
                'fuel_max_rate': table.item(row, 4).text(),
                'fuel_code': table.item(row, 5).text(),
                'id': table.item(row, 0).text()}
        self.db.update_data('cars', data)

    def clear_fuel_type(self, row, col):
        self.tableWidget_cars.cellChanged.disconnect(self.change_car)
        if col == 3:
            self.tableWidget_cars.item(row, col).setText('')
        self.tableWidget_cars.cellChanged.connect(self.change_car)

    def qmessage_box(self, title, question, question_param):
        qMessageBox = QMessageBox()
        qMessageBox.setWindowTitle(f'{title}')
        qMessageBox.setText(f'{question} {question_param}?')
        qMessageBox.setIcon(QMessageBox.Icon.Warning)
        qMessageBox.setStandardButtons(
            QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Cancel)
        qMessageBox.setDefaultButton(QMessageBox.StandardButton.Cancel)

        qMessageBox.buttonClicked.connect(self.qmessage_box_buttons)
        qMessageBox.exec()

    def qmessage_box_buttons(self, btn):
        if btn.text() == 'OK':
            self.qmessage_box_result = True
        else:
            self.qmessage_box_result = False


if __name__ == "__main__":
    try:
        from PyQt6.QtWinExtras import QtWin
        myappid = 'waybill.waybill.waybill.v1'
        QtWin.setCurrentProcessExplicitAppUserModelID(myappid)
    except ImportError:
        pass

    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon('car_icon.png'))
    app.setApplicationName('Waybill')
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowIcon(QtGui.QIcon('car_icon.png'))
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
